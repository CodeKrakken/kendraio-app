{"version":3,"sources":["./node_modules/@ngx-formly/core/fesm5/ngx-formly-core-json-schema.js","./src/app/_shared/ui-form/api-config.ts","./src/app/_shared/ui-form/services/kendraio.form.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACoB;AACR;;AAErD;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,2CAA2C,sDAAQ,EAAE,iBAAiB,gBAAgB;AACtF;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,kCAAkC,sCAAsC,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,kCAAkC,gEAAgE,EAAE;AACpG;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,kCAAkC,gEAAgE,EAAE;AACpG;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA,kCAAkC,gEAAgE,EAAE;AACpG;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB,oDAAM;AAC/B,mDAAmD;AACnD,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,+BAA+B,EAAE;AACjC,6DAA6D,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC,wCAAwC;AACxC;AACA,0CAA0C;AAC1C,uCAAuC,EAAE;AACzC,wCAAwC;AACxC;AACA,0CAA0C,uBAAuB,EAAE,GAAG,EAAE;AACxE;AACA;AACA;AACA,8CAA8C,sDAAQ,GAAG,qDAAqD;AAC9G,uCAAuC,EAAE;AACzC,wCAAwC;AACxC;AACA,0CAA0C,8BAA8B,EAAE,GAAG;AAC7E;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,oEAAoE,EAAE;AACtE;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA,+DAA+D,EAAE;AACjE;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,8BAA8B,UAAU,6BAA6B,EAAE,EAAE;AACzE;AACA;AACA;AACA,oBAAoB,0EAAiB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,iBAAiB,oDAAM;AACvB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,8BAA8B,2DAA2D,EAAE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAQ,GAAG;AAC1B,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,KAAK;AACd;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,6CAA6C;AAC7C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4B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","file":"default~bloomen-bloomen-module-ngfactory~tools-tools-module-ngfactory~youtube-youtube-module-ngfactory.js","sourcesContent":["import { __assign, __read } from 'tslib';\nimport { Injectable, defineInjectable } from '@angular/core';\nimport { ÉµreverseDeepMerge } from '@ngx-formly/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} v\n * @return {?}\n */\nfunction isEmpty(v) {\n    return v === '' || v === undefined || v === null;\n}\nvar FormlyJsonschema = /** @class */ (function () {\n    function FormlyJsonschema() {\n    }\n    /**\n     * @param {?} schema\n     * @param {?=} options\n     * @return {?}\n     */\n    FormlyJsonschema.prototype.toFieldConfig = /**\n     * @param {?} schema\n     * @param {?=} options\n     * @return {?}\n     */\n    function (schema, options) {\n        return this._toFieldConfig(schema, __assign({ schema: schema }, (options || {})));\n    };\n    /**\n     * @private\n     * @param {?} schema\n     * @param {?} options\n     * @return {?}\n     */\n    FormlyJsonschema.prototype._toFieldConfig = /**\n     * @private\n     * @param {?} schema\n     * @param {?} options\n     * @return {?}\n     */\n    function (schema, options) {\n        var _this = this;\n        if (schema.$ref) {\n            schema = this.resolveDefinition(schema, options);\n        }\n        /** @type {?} */\n        var field = {\n            type: this.guessType(schema),\n            defaultValue: schema.default,\n            templateOptions: {\n                label: schema.title,\n                readonly: schema.readOnly,\n                description: schema.description,\n            },\n        };\n        switch (field.type) {\n            case 'number':\n            case 'integer': {\n                field.parsers = [(/**\n                     * @param {?} v\n                     * @return {?}\n                     */\n                    function (v) { return isEmpty(v) ? null : Number(v); })];\n                if (schema.hasOwnProperty('minimum')) {\n                    field.templateOptions.min = schema.minimum;\n                }\n                if (schema.hasOwnProperty('maximum')) {\n                    field.templateOptions.max = schema.maximum;\n                }\n                if (schema.hasOwnProperty('exclusiveMinimum')) {\n                    this.addValidator(field, 'exclusiveMinimum', (/**\n                     * @param {?} c\n                     * @return {?}\n                     */\n                    function (c) { return isEmpty(c.value) || (c.value > schema.exclusiveMinimum); }));\n                }\n                if (schema.hasOwnProperty('exclusiveMaximum')) {\n                    this.addValidator(field, 'exclusiveMaximum', (/**\n                     * @param {?} c\n                     * @return {?}\n                     */\n                    function (c) { return isEmpty(c.value) || (c.value < schema.exclusiveMaximum); }));\n                }\n                if (schema.hasOwnProperty('multipleOf')) {\n                    field.templateOptions.step = schema.multipleOf;\n                    this.addValidator(field, 'multipleOf', (/**\n                     * @param {?} c\n                     * @return {?}\n                     */\n                    function (c) { return isEmpty(c.value) || (c.value % schema.multipleOf === 0); }));\n                }\n                break;\n            }\n            case 'string': {\n                ['minLength', 'maxLength', 'pattern'].forEach((/**\n                 * @param {?} prop\n                 * @return {?}\n                 */\n                function (prop) {\n                    if (schema.hasOwnProperty(prop)) {\n                        field.templateOptions[prop] = schema[prop];\n                    }\n                }));\n                break;\n            }\n            case 'object': {\n                field.fieldGroup = [];\n                var _a = __read(this.resolveDependencies(schema), 2), propDeps_1 = _a[0], schemaDeps_1 = _a[1];\n                Object.keys(schema.properties || {}).forEach((/**\n                 * @param {?} key\n                 * @return {?}\n                 */\n                function (key) {\n                    /** @type {?} */\n                    var f = _this._toFieldConfig((/** @type {?} */ (schema.properties[key])), options);\n                    field.fieldGroup.push(f);\n                    f.key = key;\n                    if (Array.isArray(schema.required) && schema.required.indexOf(key) !== -1) {\n                        f.templateOptions.required = true;\n                    }\n                    if (!f.templateOptions.required && propDeps_1[key]) {\n                        f.expressionProperties = {\n                            'templateOptions.required': (/**\n                             * @param {?} m\n                             * @return {?}\n                             */\n                            function (m) { return m && propDeps_1[key].some((/**\n                             * @param {?} k\n                             * @return {?}\n                             */\n                            function (k) { return !isEmpty(m[k]); })); }),\n                        };\n                    }\n                    if (schemaDeps_1[key]) {\n                        field.fieldGroup.push(__assign({}, _this._toFieldConfig(schemaDeps_1[key], options), { hideExpression: (/**\n                             * @param {?} m\n                             * @return {?}\n                             */\n                            function (m) { return !m || isEmpty(m[key]); }) }));\n                    }\n                }));\n                break;\n            }\n            case 'array': {\n                field.fieldGroup = [];\n                Object.defineProperty(field, 'fieldArray', {\n                    get: (/**\n                     * @return {?}\n                     */\n                    function () {\n                        if (!Array.isArray(schema.items)) {\n                            // When items is a single schema, the additionalItems keyword is meaningless, and it should not be used.\n                            return _this._toFieldConfig((/** @type {?} */ (schema.items)), options);\n                        }\n                        /** @type {?} */\n                        var itemSchema = schema.items[field.fieldGroup.length]\n                            ? schema.items[field.fieldGroup.length]\n                            : schema.additionalItems;\n                        return itemSchema\n                            ? _this._toFieldConfig((/** @type {?} */ (itemSchema)), options)\n                            : null;\n                    }),\n                    enumerable: true,\n                    configurable: true,\n                });\n                break;\n            }\n        }\n        if (schema.enum) {\n            field.type = 'enum';\n            field.templateOptions.options = schema.enum.map((/**\n             * @param {?} value\n             * @return {?}\n             */\n            function (value) { return ({ value: value, label: value }); }));\n        }\n        // map in possible formlyConfig options from the widget property\n        if (schema['widget'] && schema['widget'].formlyConfig) {\n            field = ÉµreverseDeepMerge(schema['widget'].formlyConfig, field);\n        }\n        // if there is a map function passed in, use it to allow the user to\n        // further customize how fields are being mapped\n        return options.map ? options.map(field, schema) : field;\n    };\n    /**\n     * @private\n     * @param {?} schema\n     * @param {?} options\n     * @return {?}\n     */\n    FormlyJsonschema.prototype.resolveDefinition = /**\n     * @private\n     * @param {?} schema\n     * @param {?} options\n     * @return {?}\n     */\n    function (schema, options) {\n        var _a = __read(schema.$ref.split('#/'), 2), uri = _a[0], pointer = _a[1];\n        if (uri) {\n            throw Error(\"Remote schemas for \" + schema.$ref + \" not supported yet.\");\n        }\n        /** @type {?} */\n        var definition = !pointer ? null : pointer.split('/').reduce((/**\n         * @param {?} def\n         * @param {?} path\n         * @return {?}\n         */\n        function (def, path) { return def && def.hasOwnProperty(path) ? def[path] : null; }), options.schema);\n        if (!definition) {\n            throw Error(\"Cannot find a definition for \" + schema.$ref + \".\");\n        }\n        if (definition.$ref) {\n            return this.resolveDefinition(definition, options);\n        }\n        return __assign({}, definition, ['title', 'description', 'default'].reduce((/**\n         * @param {?} annotation\n         * @param {?} p\n         * @return {?}\n         */\n        function (annotation, p) {\n            if (schema.hasOwnProperty(p)) {\n                annotation[p] = schema[p];\n            }\n            return annotation;\n        }), {}));\n    };\n    /**\n     * @private\n     * @param {?} schema\n     * @return {?}\n     */\n    FormlyJsonschema.prototype.resolveDependencies = /**\n     * @private\n     * @param {?} schema\n     * @return {?}\n     */\n    function (schema) {\n        /** @type {?} */\n        var deps = {};\n        /** @type {?} */\n        var schemaDeps = {};\n        Object.keys(schema.dependencies || {}).forEach((/**\n         * @param {?} prop\n         * @return {?}\n         */\n        function (prop) {\n            /** @type {?} */\n            var dependency = (/** @type {?} */ (schema.dependencies[prop]));\n            if (Array.isArray(dependency)) {\n                // Property dependencies\n                dependency.forEach((/**\n                 * @param {?} dep\n                 * @return {?}\n                 */\n                function (dep) {\n                    if (!deps[dep]) {\n                        deps[dep] = [prop];\n                    }\n                    else {\n                        deps[dep].push(prop);\n                    }\n                }));\n            }\n            else {\n                // schema dependencies\n                schemaDeps[prop] = dependency;\n            }\n        }));\n        return [deps, schemaDeps];\n    };\n    /**\n     * @private\n     * @param {?} schema\n     * @return {?}\n     */\n    FormlyJsonschema.prototype.guessType = /**\n     * @private\n     * @param {?} schema\n     * @return {?}\n     */\n    function (schema) {\n        /** @type {?} */\n        var type = (/** @type {?} */ (schema.type));\n        if (!type && schema.properties) {\n            return 'object';\n        }\n        return type;\n    };\n    /**\n     * @private\n     * @param {?} field\n     * @param {?} name\n     * @param {?} validator\n     * @return {?}\n     */\n    FormlyJsonschema.prototype.addValidator = /**\n     * @private\n     * @param {?} field\n     * @param {?} name\n     * @param {?} validator\n     * @return {?}\n     */\n    function (field, name, validator) {\n        field.validators = field.validators || {};\n        field.validators[name] = validator;\n    };\n    FormlyJsonschema.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ FormlyJsonschema.ngInjectableDef = defineInjectable({ factory: function FormlyJsonschema_Factory() { return new FormlyJsonschema(); }, token: FormlyJsonschema, providedIn: \"root\" });\n    return FormlyJsonschema;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyJsonschema };\n\n//# sourceMappingURL=ngx-formly-core-json-schema.js.map","export const FORM_APIS = {\r\n\r\n    youtube: {\r\n        basic:\r\n        {\r\n            jsonSchema: 'assets/YouTube/youtube-edit-video-basic.json',\r\n            uiSchema: 'assets/YouTube/youtube-edit-video-basic-ui.json',\r\n        },\r\n        advanced:     {\r\n            jsonSchema: 'assets/YouTube/youtube-edit-video-advanced.schema.json',\r\n            uiSchema: 'assets/YouTube/youtube-edit-video-advanced.ui.json',\r\n        },\r\n        arrays:     {\r\n            jsonSchema: 'assets/YouTube/arrays.json',\r\n            uiSchema: 'assets/YouTube/youtube-edit-video-advanced.ui.json',\r\n        }\r\n      },\r\n\r\n  };\r\n","import { Injectable } from '@angular/core';\r\nimport { FormlyFieldConfig } from '@ngx-formly/core';\r\n// import { Field } from '../helpers/fields';\r\n// import { DEFAULT_FORM } from '../schemas/default.form';\r\n// import { LOGIN_FORM } from '../schemas/login.form';\r\n// import { FORMS_VALUES } from '../schemas';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { FULLNAME, EMAIL, TYPEAHEAD } from '../schemas/form-elements';\r\nimport { Observable, from, forkJoin, throwError } from 'rxjs';\r\nimport { FORM_APIS } from '../api-config';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class KendraioFormService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getFormData(formId): Observable<any> {\r\n    return forkJoin([this.getUI(formId), this.getSchema(formId)]);\r\n  }\r\n\r\n  getUI(formId: string): Observable<any> {\r\n    const url = FORM_APIS.youtube[formId].uiSchema;\r\n\r\n    return this.http.get(url)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  getSchema(formId: string): Observable<any> {\r\n    const url = FORM_APIS.youtube[formId].jsonSchema;\r\n    return this.http.get<FormlyFieldConfig[]>(url);\r\n  }\r\n\r\n  uiMapper(formlyConfig, jsonSchema, uiSchema) {\r\n    console.log(jsonSchema);\r\n    let i = 0;\r\n    try {\r\n      if (Object.keys(uiSchema).length) {\r\n        Object.keys(jsonSchema.properties).forEach(function (key) {\r\n          Object.keys(uiSchema).forEach(function (uiKey) {\r\n            if (uiKey === key) {\r\n              //  jsonSchema.properties.bandArtist.type = uiSchema.bandArtist['ui:type'];\r\n              formlyConfig['fieldGroup'][i]['templateOptions']['disabled'] = uiSchema[key]['ui:disabled'];\r\n              formlyConfig['fieldGroup'][i]['templateOptions']['placeholder'] = uiSchema[key]['ui:placeholder'];\r\n              formlyConfig['fieldGroup'][i]['templateOptions']['required'] = uiSchema[key]['ui:required'];\r\n            }\r\n          });\r\n          i++;\r\n        });\r\n      }\r\n\r\n      return formlyConfig;\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n  }\r\n\r\n  jsonMapper(jsonSchema, uiSchema) {\r\n    let i = 0;\r\n    try {\r\n\r\n      Object.keys(uiSchema).forEach(function (key) {\r\n        Object.keys(jsonSchema.properties).forEach(function (uiKey) {\r\n          // jsonSchema.properties.bandArtist.type = 'datepicker';\r\n          if (uiKey === key) {\r\n            jsonSchema.properties[i].type = uiSchema.bandArtist['ui:type'];\r\n\r\n          }\r\n        });\r\n        i++;\r\n      });\r\n      return jsonSchema;\r\n    } catch (e) {\r\n\r\n    }\r\n\r\n  }\r\n\r\n  errorHandler(error: HttpErrorResponse) { // added HttpInterceptor so maybe dont need this\r\n    if (error.error instanceof ErrorEvent) {\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      console.error(\r\n        `Backend http returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    return throwError(\r\n      'Something naughty happened; please try again later.');\r\n\r\n  }\r\n\r\n  // public getFormById(id: string, disabled = false, data?: object) {\r\n  //   const ob = FORMS_VALUES(disabled, data)[id];\r\n  //   console.log(ob)\r\n  //   return ob;\r\n  // }\r\n\r\n  // public getJSONFormById(id: string, disabled = false, data: any = {}) {\r\n  //   const frm = this.generateCleanJsonConfiguration(FORMS_VALUES(disabled, data)[id]);\r\n  //   return  frm;\r\n  // }\r\n\r\n  // private generateCleanJsonConfiguration(clone: object[]) {  // use this to create JSON config ??? maybe??\r\n  //   return JSON.parse(JSON.stringify(clone));\r\n  // }\r\n\r\n  // getYoutubeData() {\r\n  //   return this.http.get<FormlyFieldConfig[]>('assets/fake-data/you-tube-api.json');\r\n  // }\r\n\r\n  // getYoutubeFields() {\r\n\r\n  //   const mappedFields = [\r\n  //     { 'field': 'FULLNAME', 'enabled': false },\r\n  //     { 'field': 'EMAIL', 'enabled': false },\r\n  //   ];\r\n\r\n  //   const myFields = [\r\n  //     // FULLNAME(false, data['fullname']),\r\n  //     // EMAIL(false, data['email']),\r\n  //   ];\r\n\r\n  //   mappedFields.forEach(v => {\r\n  //     const fname = v.field;\r\n\r\n\r\n  //     //  myFields.push(\r\n\r\n  //         console.log(v[fname](false, {\r\n  //           'id': 'YOUTUBE',\r\n  //           'fullname': 'Bernie Winters',\r\n  //           'email': 'bernie@heaven.com'\r\n  //       }));\r\n\r\n  //       //  [fname](false, data['fullname'])\r\n\r\n\r\n  //    //   );\r\n\r\n\r\n  //   });\r\n\r\n  // }\r\n\r\n\r\n\r\n}\r\n"],"sourceRoot":""}