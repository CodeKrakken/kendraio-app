{"version":3,"sources":["webpack:///./src/app/bloomen/_shared/bloomen-users.service.ts","webpack:///./src/app/bloomen/_shared/form-models/login-form.layout.ts","webpack:///./src/app/bloomen/_shared/form-models/login-form.modal.ts","webpack:///./src/app/bloomen/users/_shared/account-form.component.html","webpack:///./src/app/bloomen/users/_shared/account-form.component.ts","webpack:///./src/app/bloomen/users/_shared/account-login-form.component.html","webpack:///./src/app/bloomen/users/_shared/account-login-form.component.ts","webpack:///./src/app/bloomen/users/_shared/index.ts","webpack:///./src/app/bloomen/users/list/list.component.html","webpack:///./src/app/bloomen/users/list/list.component.scss","webpack:///./src/app/bloomen/users/list/list.component.ts","webpack:///./src/app/bloomen/users/register-user/register-user.component.html","webpack:///./src/app/bloomen/users/register-user/register-user.component.scss","webpack:///./src/app/bloomen/users/register-user/register-user.component.ts","webpack:///./src/app/bloomen/users/users-routing.module.ts","webpack:///./src/app/bloomen/users/users.module.ts"],"names":[],"mappings":"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","file":"users-users-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { IUser } from 'src/app/_models/classes';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BloomenUsersService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n\r\n  // {\r\n  //   \"username\": \"string\",\r\n  //   \"password\": \"string\",\r\n  //   \"email\": \"string\",\r\n  //   \"invitation\": \"string\"\r\n  // }\r\n\r\n\r\n  create(bloomenUser: any): any {\r\n    bloomenUser = this.userMapper(bloomenUser)\r\n    localStorage.setItem('currentuser', JSON.stringify(bloomenUser));\r\n    //  return this.http.post<IUser>(`${environment.appApi.baseUrl}/accounts/register`, contact)\r\n    return this.http.post<any>('https://bloomen.herokuapp.com/auth/register', bloomenUser);\r\n  }\r\n\r\n\r\n  userMapper(user: any) {\r\n    const mappedUser = {\r\n      'username': user.logonDetails.username,\r\n      'password': user.logonDetails.password,\r\n      'email': user.accountDetails.email,\r\n      'invitation': 'tim@test.com'\r\n    };\r\n\r\n    return mappedUser;\r\n\r\n  }\r\n  //   update(contact: IUser): Observable<any> {\r\n  //     const user = <IUser>JSON.parse(localStorage.getItem('currentUser'))\r\n  //     contact.id = user.id;\r\n  //     return user;\r\n  //  //   return this.http.put<any>(`${environment.appApi.baseUrl}/accounts`, contact)\r\n  //   }\r\n\r\n\r\n}\r\n","export const LOGIN_FORM_LAYOUT = {\r\n\r\n    'passwordSetterGroup': {\r\n        element: {\r\n            control: 'form-container mat-form-field-flex',          \r\n        },\r\n        grid: {\r\n        }\r\n    },\r\n    'password': {\r\n        element: {\r\n            host: ''\r\n        }\r\n    }\r\n};\r\n","\r\nimport {\r\n    DynamicCheckboxModel,\r\n    DynamicDatePickerModel,\r\n    DynamicFormGroupModel,\r\n    DynamicInputModel,\r\n    DynamicRadioGroupModel,\r\n    DynamicSelectModel,\r\n    DynamicSwitchModel,\r\n    DynamicTextAreaModel\r\n} from '@ng-dynamic-forms/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n// import { PasswordStrength } from 'src/app/_shared/directives/passwordValidation';\r\n// import { PasswordStrength } from 'src/app/_shared/directives/passwordValidation';\r\n\r\n\r\n//  export const passwordStrength: string = '222'\r\n\r\n\r\n\r\n//    let passwordField: DynamicInputModel;\r\n\r\n\r\n\r\n    //  this.passwordField =  new DynamicInputModel({\r\n    //     id: 'password',\r\n    //     maxLength: 25,\r\n    //     minLength: 8,   \r\n    //     placeholder: 'Password',\r\n    //     validators: {\r\n    //         required: null,                \r\n    //         PasswordStrength2: null\r\n    //     },\r\n    //     errorMessages: {\r\n    //         required: '{{ id }} baddy',\r\n    //         PasswordStrength2: '{{ id }} is too weak'\r\n    //     }\r\n    // });\r\n\r\n\r\n\r\n    // this.confirmPasswordField =   new DynamicInputModel({\r\n    //     id: 'confirmPassword',\r\n    //     maxLength: 50,\r\n    //     placeholder: 'Confirm Password',\r\n    //     validators: {\r\n    //         required: null\r\n    //     },\r\n    //     errorMessages: {\r\n    //         required: 'Field is required'\r\n    //     },\r\n    //     additional: {\r\n    //         color: 'accent'\r\n    //     }\r\n    // });\r\n\r\n//     export class BillyBongo  {\r\n//         dangerousUrl: any;\r\n//         trustedUrl: any;\r\n\r\n//     constructor(private sanitizer: DomSanitizer) {\r\n//         // javascript: URLs are dangerous if attacker controlled.\r\n//         // Angular sanitizes them in data binding, but you can\r\n//         // explicitly tell Angular to trust this value:\r\n//         this.dangerousUrl = 'javascript:alert(\"Hi there\")';\r\n//         this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);\r\n// const boo =  '<mat-icon>visibility</mat-icon>';\r\n//     }\r\n//     export const this.trustedUrl;\r\n// }\r\n\r\nexport const LOGIN_FORM_MODEL = [\r\n  \r\n    new DynamicInputModel({\r\n        id: 'username', \r\n        label: 'Email/Username',\r\n        maxLength: 25,\r\n        minLength: 5,   \r\n        placeholder: 'Enter Email/Username',\r\n        suffix: 'booboo',\r\n        validators: {\r\n            required: null,                \r\n        },\r\n        errorMessages: {\r\n            required: '{{ label }} is required',\r\n        }\r\n    }),\r\n\r\nnew DynamicFormGroupModel({\r\n        id: 'passwordSetterGroup',\r\n        legend: 'Set your password',\r\n        group: [\r\n  \r\n            new DynamicInputModel({\r\n                id: 'password',\r\n                maxLength: 25,\r\n                minLength: 8,   \r\n                placeholder: 'Password',\r\n                validators: {\r\n                    required: null,                \r\n                    PasswordStrength2: null\r\n                },\r\n                errorMessages: {\r\n                    required: '{{ id }} is required',\r\n                    PasswordStrong: 'Your {{ placeholder }} {{PasswordStrength2.PasswordStrong}} is too weak {{msg}}'\r\n                }\r\n            }),\r\n          new DynamicInputModel({\r\n            id: 'confirmPassword',\r\n            maxLength: 50,\r\n            placeholder: 'Confirm Password',\r\n            disabled: true,\r\n            validators: {\r\n                required: null\r\n            },\r\n            errorMessages: {\r\n                required: 'Field is required'\r\n            },\r\n            additional: {\r\n                color: 'accent'\r\n            }\r\n        })\r\n        ],\r\n        validators: {\r\n           matchPasswords: null, \r\n            // validators: null\r\n        },\r\n        errorMessages: {\r\n         noMatchingPasswords: 'Passwords do not match',\r\n        }\r\n      })\r\n\r\n\r\n\r\n\r\n];\r\n","module.exports = \"<!-- [formGroup]=\\\"userForm\\\" -->\\r\\n<form (submit)=\\\"submit()\\\" novalidate autocomplete=\\\"on\\\" \\r\\n[formGroup]=\\\"userForm\\\">\\r\\n\\r\\n\\r\\n  <section>\\r\\n\\r\\n\\r\\n      <section class=\\\"form-container\\\" fxLayout=\\\"row\\\"  fxLayoutGap=\\\"40px\\\" fxFlexFill>\\r\\n      <mat-form-field appearance=\\\"standard\\\">\\r\\n        <mat-label>First Names</mat-label>\\r\\n        <input matInput placeholder=\\\"Enter First Names\\\" formControlName=\\\"firstname\\\">\\r\\n        <mat-error *ngIf=\\\"firstname.invalid\\\">{{getErrorMessage()}}</mat-error>\\r\\n      </mat-form-field>\\r\\n\\r\\n\\r\\n\\r\\n      <mat-form-field appearance=\\\"standard\\\">\\r\\n        <mat-label>Last Name</mat-label>\\r\\n        <input matInput placeholder=\\\"Enter Last Name\\\" [formControl]=\\\"lastname\\\" >\\r\\n        <mat-error *ngIf=\\\"lastname.invalid\\\">{{getErrorMessage()}}</mat-error>\\r\\n      </mat-form-field>\\r\\n    </section>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    <section  class=\\\"form-container\\\" fxLayout=\\\"row\\\"  fxLayoutGap=\\\"40px\\\" fxFlexFill>\\r\\n\\r\\n      <mat-form-field appearance=\\\"standard\\\">\\r\\n        <mat-label>Email</mat-label>\\r\\n        <!-- (keyup)=\\\"onEmailChange()\\\"  -->\\r\\n        <input matInput type=\\\"email\\\" placeholder=\\\"Enter Email\\\" email\\r\\n        [ngClass]=\\\"{'isLoading' : isLoading}\\\"\\r\\n        [formControl]=\\\"email\\\">\\r\\n        <mat-error *ngIf=\\\"email.invalid\\\">{{getErrorMessage()}}</mat-error>\\r\\n        <mat-hint align=\\\"end\\\" *ngIf=\\\"isLoading\\\">Checking Email.... please wait</mat-hint>\\r\\n      </mat-form-field>\\r\\n\\r\\n\\r\\n      <mat-form-field appearance=\\\"standard\\\">\\r\\n        <mat-label>Telephone</mat-label>\\r\\n        <input matInput placeholder=\\\"Enter Telephone/Mobile\\\" [formControl]=\\\"telephone\\\">\\r\\n      </mat-form-field>\\r\\n\\r\\n    </section>\\r\\n\\r\\n    | {{ userForm.valid | json }}\\r\\n\\r\\n  </section>\\r\\n\\r\\n  <div>\\r\\n    <div class=\\\"card\\\">\\r\\n      <div class=\\\"card-body small\\\">\\r\\n        <i class=\\\"fa fa-exclamation-triangle \\\" aria-hidden=\\\"true\\\" style=\\\"color:orange\\\"> </i>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  <!-- <div class=\\\"form-group clear\\\">\\r\\n\\r\\n\\r\\n\\r\\n    <button type=\\\"submit\\\" [disabled]=\\\"!userForm.valid\\\" class=\\\"button button--action button--lg float-right\\\">\\r\\n      Submit\\r\\n    </button>\\r\\n    <div *ngIf=\\\"(iAccept.value === '' || iAccept.value === false) && userForm.valid\\\" class=\\\"float-right small \\\"\\r\\n      style=\\\"clear: both\\\">\\r\\n      <p><i class=\\\"fa fa-exclamation-triangle \\\" aria-hidden=\\\"true\\\" style=\\\"color:orange\\\"> </i> You must accept the\\r\\n        <b>Personal Data Statement</b> to continue</p>\\r\\n    </div>\\r\\n \\r\\n\\r\\n\\r\\n  </div> -->\\r\\n\\r\\n</form>\\r\\n\"","import { distinctUntilChanged, debounceTime, map, filter, tap } from 'rxjs/operators';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport {\r\n  Component,\r\n  HostBinding,\r\n  OnChanges,\r\n  AfterViewChecked,\r\n  OnDestroy,\r\n  OnInit,\r\n  SimpleChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\n// import { AnimationService } from '../../_shared/animations/animation.service';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\n// import { ValidationService } from 'src/app/_shared/services/validation.service';\r\nimport { IUser } from 'src/app/_models/classes';\r\n\r\n// import { environment } from 'environments/environment';\r\n@Component({\r\n  selector: 'app-account-form',\r\n  templateUrl: './account-form.component.html'\r\n})\r\nexport class AccountFormComponent implements OnInit, OnDestroy, OnChanges {\r\n  // @Input()\r\n  // currentUser: IUser;\r\n  @Input()\r\n  pageTitle: string;\r\n  @Input()\r\n  mode: string;\r\n  @Input()\r\n  data: any;\r\n  @Output()\r\n  formData: EventEmitter<Object> = new EventEmitter<Object>();\r\n\r\n  // @Output()\r\n  onSubmit = new EventEmitter<IUser>();\r\n  // @HostBinding('@routing')\r\n  // routing;\r\n  @HostBinding('style.display')\r\n  display = 'block';\r\n  emailChanges$: Observable<string>;\r\n\r\n  email: FormControl;\r\n  plantGroup: string;\r\n  subTitle: string;\r\n  showNamer = false;\r\n  // user: IUser;\r\n  userForm: FormGroup;\r\n  crumb: string;\r\n  // private userFormChanges: any;\r\n  private emailSub: Subscription;\r\n  isLoading = false;\r\n  isUnique = false;\r\n  msg: any = '';\r\n  errorMessage: string;\r\n  originalEmail: string;\r\n  // EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;\r\n  EMAIL_REGEXP = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n  TEL_REGEX = /^[\\d\\s]+$/i;\r\n\r\n  now: string;\r\n  firstname: FormControl;\r\n  lastname: FormControl;\r\n  telephone: FormControl;\r\n  sub: Subscription;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private _fb: FormBuilder,\r\n    // private validationService: ValidationService\r\n  ) {\r\n     this.createForm();\r\n  }\r\n  // updateOn: 'blur' USE THIS TODO:\r\n\r\n  getErrorMessage() {\r\n    return this.email.hasError('required') ? 'You must enter a value' :\r\n        this.email.hasError('pattern') ? 'Not a valid email' :\r\n            '';\r\n  }\r\n\r\n  createForm() {\r\n    this.email = new FormControl('test@test.com', [Validators.required, Validators.email]);\r\n    this.firstname = this._fb.control('', [\r\n      Validators.required,\r\n      Validators.minLength(2)\r\n    ]);\r\n    this.lastname = this._fb.control('lastName', [\r\n      Validators.required,\r\n      Validators.minLength(2)\r\n    ]);\r\n    this.telephone = this._fb.control('999-999-999', [\r\n      Validators.required,\r\n      Validators.minLength(8)\r\n    ]);\r\n    this.userForm = this._fb.group({\r\n      // bloomenRef: this.now,\r\n        firstname: this.firstname,\r\n        lastname: this.lastname,\r\n        email: this.email,\r\n        telephone: this.telephone,\r\n    });\r\n  }\r\n  get address(): any {\r\n    return this.userForm.get('address');\r\n  }\r\n  get iAccept(): any {\r\n    return this.userForm.get('iAccept');\r\n  }\r\n  ngOnInit() {\r\n    this.now = (Math.floor(Math.random() * 9999) + 1).toString(); // Date().toString();\r\n    this.createForm();\r\n    this.emailChanges$ = this.email.valueChanges;\r\n    // this.currentUser$ = this.currentUser;\r\n    this.subTitle = this.route.snapshot.data['subTitle'];\r\n    this.crumb = this.route.snapshot.data['crumbs'];\r\n    this.emailSub = this.emailChanges$\r\n      .pipe(\r\n        distinctUntilChanged(),\r\n        debounceTime(400),\r\n        tap(() => {\r\n          this.isUnique = false;\r\n          this.email.setValidators([\r\n            Validators.required,\r\n            Validators.minLength(8),\r\n            Validators.pattern(this.EMAIL_REGEXP)\r\n          ]);\r\n          this.email.updateValueAndValidity();\r\n          this.isLoading = true;\r\n          this.msg = null;\r\n        })\r\n      )\r\n      .pipe(debounceTime(400))\r\n      .subscribe(val => {\r\n        // this.checkEmailName(this.email.value);\r\n        this.isLoading = false;\r\n      });\r\n\r\n\r\n      this.sub = this.userForm.valueChanges\r\n      .pipe(\r\n        distinctUntilChanged(),\r\n        debounceTime(600)\r\n      )\r\n      .subscribe(newValue => {\r\n\r\n        this.formData.emit(this.userForm);\r\n\r\n      });\r\n\r\n\r\n  }\r\n\r\n  ngOnChanges() {\r\nconsole.log('ive changed')\r\n  }\r\n\r\n  // checkEmailName(val: string): void {\r\n  //   if (this.email.valid && this.email.value !== this.originalEmail) {\r\n  //     const sub = this.validationService\r\n  //       .checkForDupEmail(val)\r\n  //       .subscribe((res: string) => this.onEmailChecked(res), (error: any) => (this.errorMessage = <any>error));\r\n  //     this.emailSub.add(sub);\r\n  //   }\r\n  // }\r\n\r\n  onEmailChecked(res: any): void {\r\n    this.isUnique = !res.result.value;\r\n    if (this.isUnique) {\r\n      this.msg = { msg: null, isValid: true };\r\n    } else {\r\n      this.msg = { msg: 'This Email is Already in use! Please try another', isValid: false };\r\n    }\r\n    this.email.setValidators([\r\n      Validators.required,\r\n      Validators.minLength(8),\r\n      // isValid(this.isUnique),\r\n      Validators.pattern(this.EMAIL_REGEXP)\r\n    ]);\r\n    this.email.updateValueAndValidity();\r\n    this.isLoading = false;\r\n  }\r\n  onEmailChange() {}\r\n\r\n  submit() {\r\n    if (this.userForm.valid) {\r\n      this.onSubmit.emit(this.userForm.value);\r\n      // this.originalEmail = this.userForm.value.contactDetails.email;\r\n    }\r\n  }\r\n\r\n  prepareSaveUser(): IUser {\r\n    const formModel = this.userForm.value;\r\n    const saveUser: IUser = {\r\n      id: '',\r\n      fName: '',\r\n      lName: ''\r\n    };\r\n    return saveUser;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // this.userFormChanges.unsubscribe() // TODO!!\r\n    this.emailSub.unsubscribe();\r\n  }\r\n\r\n  toggleLogin() {\r\n    // this.loginService.isDisplayed = !this.loginService.isDisplayed;\r\n    // if (this.loginService.isDisplayed) {\r\n    this.router.navigate([{ outlets: { popup: ['login'] } }]);\r\n    // } else {\r\n    //   this._router.navigate([{ outlets: { popup: null } }]);\r\n    // }\r\n  }\r\n}\r\n\r\n\r\n","module.exports = \"<div *ngIf=\\\"isLoading\\\">\\r\\n  <span class=\\\"sr-only\\\">Loading...</span>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- [formGroup]=\\\"loginForm\\\" -->\\r\\n<!-- <form (submit)=\\\"submit()\\\" novalidate [formGroup]=\\\"loginForm\\\">\\r\\n\\r\\n  <div *ngIf=\\\"mode != 'edit'\\\" class=\\\"form-container\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"40px\\\" fxFlexFill>\\r\\n\\r\\n    <mat-form-field appearance=\\\"standard\\\">\\r\\n      <mat-label>Email/Username</mat-label>\\r\\n      <input matInput placeholder=\\\"Enter Email/Username\\\" autofocus [readonly]=\\\"mode === 'create'\\\" value=\\\"{{email}}\\\"\\r\\n        formControlName=\\\"username\\\">\\r\\n    </mat-form-field>\\r\\n\\r\\n  </div>\\r\\n\\r\\n\\r\\n\\r\\n  <section class=\\\"form-container\\\" fxLayout=\\\"row\\\" fxLayoutGap=\\\"40px\\\" fxFlexFill>\\r\\n\\r\\n    <mat-form-field appearance=\\\"standard\\\" *ngIf=\\\"mode === 'edit'\\\">\\r\\n      <mat-label>Current Password</mat-label>\\r\\n      <input matInput placeholder=\\\"Enter current password\\\" [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n      <mat-icon (click)=\\\"hide = !hide\\\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n    </mat-form-field>\\r\\n\\r\\n    <mat-form-field appearance=\\\"standard\\\">\\r\\n      <mat-label>Password</mat-label>\\r\\n      <input formControlName=\\\"password\\\" matInput placeholder=\\\"Enter new password\\\"\\r\\n        [type]=\\\"hidePassword ? 'password' : 'text'\\\">\\r\\n      <mat-icon matSuffix (click)=\\\"hidePassword = !hidePassword\\\">{{hidePassword ? 'visibility_off' : 'visibility'}}\\r\\n\\r\\n      </mat-icon>\\r\\n\\r\\n      <mat-error *ngIf=\\\"password.invalid\\\">Password is too weak</mat-error>\\r\\n\\r\\n    </mat-form-field>\\r\\n\\r\\n\\r\\n    <mat-form-field appearance=\\\"standard\\\">\\r\\n      <mat-label>Confirm Password</mat-label>\\r\\n      <input formControlName=\\\"confirmPassword\\\" matInput placeholder=\\\"Enter your password again\\\"\\r\\n        [type]=\\\"hidePassword ? 'password' : 'text'\\\">\\r\\n      <mat-icon matSuffix (click)=\\\"hidePassword = !hidePassword\\\">{{hidePassword ? 'visibility_off' : 'visibility'}}\\r\\n      </mat-icon>\\r\\n      <mat-error *ngIf=\\\"confirmPassword.invalid\\\">oops</mat-error>\\r\\n    </mat-form-field>\\r\\n\\r\\n  </section>\\r\\n  <mat-hint *ngIf=\\\"password.invalid && password.value.length > 2\\\">Password must contain at least one upper case\\r\\n    character, at least one number and at least 8 characters\\r\\n    in length.</mat-hint>\\r\\n\\r\\n \\r\\n  <div class=\\\"alert alert-danger\\\"\\r\\n    *ngIf=\\\"confirmPassword.errors?.MatchPassword && password.valid && confirmPassword.value.length > 2\\\">Passwords do not\\r\\n    match</div>\\r\\n\\r\\n\\r\\n</form>\\r\\n<hr> -->\\r\\n\\r\\n<form [formGroup]=\\\"formGroupNew\\\">\\r\\n\\r\\n  <!-- <dynamic-material-form [group]=\\\"formGroupNew\\\" [layout]=\\\"formLayout\\\" [model]=\\\"formModel\\\" (blur)=\\\"onBlur($event)\\\"\\r\\n    (change)=\\\"onChange($event)\\\" (focus)=\\\"onFocus($event)\\\" (matEvent)=\\\"onMatEvent($event)\\\">\\r\\n\\r\\n    <ng-template modelId=\\\"password\\\" >\\r\\n      <div class=\\\"mat-form-field-suffix\\\">\\r\\n        <mat-icon matSuffix (click)=\\\"hidePassword = !hidePassword\\\">{{hidePassword ? 'visibility_off' : 'visibility'}}\\r\\n        </mat-icon>\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n\\r\\n\\r\\n  </dynamic-material-form> -->\\r\\n\\r\\n  <!-- <mat-error *ngIf=\\\"formGroupNew.get('password').invalid\\\">Password is too weak</mat-error> -->\\r\\n\\r\\n\\r\\n  <!-- {{formGroupNew.get('passwordSetterGroup.password').value | json}} -->\\r\\n</form>\\r\\n\\r\\n<!-- {{ formGroupNew.value | json }} -->\\r\\n\\r\\n<form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"submit()\\\">\\r\\n  <formly-form [model]=\\\"model\\\" [fields]=\\\"fields\\\" [options]=\\\"options\\\" [form]=\\\"form\\\"></formly-form>\\r\\n  <button type=\\\"submit\\\" class=\\\"btn btn-primary submit-button\\\">Submit</button>\\r\\n</form>\\r\\n\\r\\n\\r\\n\"","\r\nimport {distinctUntilChanged,  map, filter, tap, debounceTime } from 'rxjs/operators';\r\n// import { UserService } from '../../_shared/services';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators, FormControl, } from '@angular/forms';\r\nimport { Component, HostBinding, OnChanges, OnDestroy, OnInit, SimpleChanges, Input, Output, EventEmitter } from '@angular/core';\r\n// import { AnimationService } from '../../_shared/animations/animation.service';\r\nimport { IUser } from 'src/app/_models/classes';\r\nimport { PasswordValidation, PasswordStrength } from 'src/app/_shared/directives/passwordValidation';\r\nimport { Subscription } from 'rxjs';\r\n import { DynamicFormModel, DynamicFormLayout, DynamicFormService } from '@ng-dynamic-forms/core';\r\nimport { LOGIN_FORM_MODEL } from '../../_shared/form-models/login-form.modal';\r\nimport { LOGIN_FORM_LAYOUT } from '../../_shared/form-models/login-form.layout';\r\nimport { FormlyFormOptions, FormlyFieldConfig } from '@ngx-formly/core';\r\n\r\n@Component({\r\n  selector: 'app-account-login-form',\r\n  templateUrl: './account-login-form.component.html'\r\n})\r\nexport class AccountLoginFormComponent implements OnInit, OnDestroy {\r\n  @Input() userId: string;\r\n  @Input() pageTitle: string;\r\n  @Input() email: string;\r\n  @Input() mode: string;\r\n  @Output() onSubmit = new EventEmitter<IUser>();\r\n  @Input()\r\n  data: any;\r\n  @Output()\r\n  formData: EventEmitter<Object> = new EventEmitter<Object>();\r\n  @HostBinding('style.display') display = 'block';\r\n\r\n  subTitle: string;\r\n  user: IUser;\r\n  isLoading: boolean;\r\n  showPassword = false;\r\n\r\n  loginForm: FormGroup;\r\n  passwordCtrl: FormControl;\r\n  confirmPasswordCtrl: FormControl;\r\n  currentPasswordCtrl: FormControl;\r\n  hidePassword = true;\r\n  // passwordPattern: RegExp = /^(?=.*[A-Z])(?=.*[a-z])(?=.*[!+_#\\-&$£*])(?=.*[0-9]).{8,24}?$/g;\r\n  passwordPattern: RegExp = /^(?=.*[a-z])(?=.*[A-Z]).{8,30}$/g;\r\n  private userFormChanges: any;\r\n  sub: Subscription;\r\n\r\n  formGroupNew: FormGroup;\r\n  formLayout: DynamicFormLayout = LOGIN_FORM_LAYOUT;\r\n  formModel: DynamicFormModel = LOGIN_FORM_MODEL;\r\n\r\n  form = new FormGroup({});\r\n  model: any = {};\r\n  options: FormlyFormOptions = {};\r\n\r\n\r\n  fields: FormlyFieldConfig[] = [{\r\n    key: 'password',\r\n    validators: {\r\n      fieldMatch: {\r\n        expression: (control) => {\r\n          const value = control.value;\r\n          return value.passwordConfirm === value.password\r\n            // avoid displaying the message error when values are empty\r\n            || (!value.passwordConfirm || !value.password);\r\n        },\r\n        message: 'Password Not Matching',\r\n        errorPath: 'passwordConfirm',\r\n      },\r\n    },\r\n    fieldGroup: [\r\n      {\r\n        key: 'password',\r\n        type: 'input',\r\n        templateOptions: {\r\n          type: 'password',\r\n          label: 'Password',\r\n          placeholder: `Must be at least 8 characters`,\r\n          required: true,\r\n          minLength: 8,\r\n        },\r\n      },\r\n      {\r\n        key: 'passwordConfirm',\r\n        type: 'input',\r\n        hideExpression: (model) => !model.password,\r\n        templateOptions: {\r\n          type: 'password',\r\n          label: 'Confirm Password',\r\n          placeholder: 'Please re-enter your password',\r\n          required: true,\r\n        },\r\n      },\r\n    ],\r\n  }];\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private formService: DynamicFormService\r\n  ) {\r\n    // this.passwordPattern = /^(?=.*[A-Z])(?=.*[a-z])(?=.*[!+_#\\-&$£*])(?=.*[0-9])$/g\r\n    this.formGroupNew = this.formService.createFormGroup(this.formModel);\r\n  }\r\n  \r\n\r\n  ngOnInit() {   \r\n    this.loginForm = this.fb.group({\r\n      currentPassword: 'Whollop-99', //currentPasswordCtrl,\r\n      password: ['Whollop99', [\r\n        Validators.required,\r\n         PasswordStrength.strong,\r\n        // Validators.pattern(this.passwordPattern)\r\n      ]],\r\n      confirmPassword: [{ value: 'Whollop99', disabled: true}, [Validators.required]],\r\n      username: [{ value: 'Whollop99'}, [Validators.required, Validators.minLength(4)]]\r\n    }, \r\n    {\r\n        validator: PasswordValidation.MatchPassword\r\n      });\r\n\r\n    this.currentPasswordCtrl = (<any>this.loginForm).controls.currentPassword;\r\n    this.passwordCtrl = (<any>this.loginForm).controls.password;\r\n    this.confirmPasswordCtrl = (<any>this.loginForm).controls.confirmPassword; //TODO is this nessesary?\r\n    if (this.mode === 'create' || this.mode === 'reset') {\r\n      this.currentPasswordCtrl.setValidators(null);\r\n      this.currentPasswordCtrl.updateValueAndValidity();\r\n    }\r\n\r\n    this.showPassword = false;\r\n    const passwordStatusChange$ = this.password2.statusChanges;\r\n    passwordStatusChange$.pipe(distinctUntilChanged()).subscribe(\r\n      status => {\r\n        if (status === 'INVALID') {\r\n          this.confirmPassword2.disable();\r\n        } else if (status === 'VALID') {\r\n          this.confirmPassword2.enable();\r\n        }\r\n      });\r\n\r\n      this.sub = this.loginForm.valueChanges\r\n      .pipe(\r\n        distinctUntilChanged(),\r\n        debounceTime(600)\r\n      )\r\n      .subscribe(newValue => {\r\n\r\n        this.formData.emit(this.loginForm);\r\n\r\n      });\r\n\r\n//        this.sub.add(\r\n// this.password2.statusChanges.subscribe(\r\n//   (val) => {\r\n//     this.confirmPassword2.enable();\r\n// })\r\n\r\n//        );\r\n\r\n      // this.formGroupNew = this.formService.createFormGroup(this.formModel);\r\n      // this.formGroupNew.get('password').setValidators(\r\n      //   PasswordStrength.strong\r\n      // );\r\n\r\n  }\r\n  get password2() {\r\n    return this.formGroupNew.get('passwordSetterGroup.password');\r\n  }\r\n  get confirmPassword2() {\r\n    return this.formGroupNew.get('passwordSetterGroup.confirmPassword');\r\n  }\r\n\r\n  get password() {\r\n    return this.loginForm.get('password');\r\n  }\r\n  get confirmPassword() {\r\n    return this.loginForm.get('confirmPassword');\r\n  }\r\n  ngOnDestroy() {\r\n    //   this.userFormChanges.unsubscribe() //TODO!!!\r\n  }\r\n\r\n  toggleShowPassword(): void {\r\n    this.showPassword = !this.showPassword;\r\n  }\r\n\r\n  submit() {\r\n    if (this.loginForm.valid) {\r\n      this.onSubmit.emit(this.loginForm.value);\r\n    }\r\n\r\n  }\r\n\r\n  \r\n  onBlur($event) {\r\n    console.log(`Material blur event on: ${$event.model.id}: `, $event);\r\n  }\r\n\r\n  onChange($event) {\r\n    console.log(`Material change event on: ${$event.model.id}: `, $event);\r\n  }\r\n\r\n  onFocus($event) {\r\n    console.log(`Material focus event on: ${$event.model.id}: `, $event);\r\n  }\r\n\r\n  onMatEvent($event) {\r\n    console.log(`Material ${$event.type} event on: ${$event.model.id}: `, $event);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export * from './account-form.component';\r\nexport * from './account-login-form.component'\r\n","module.exports = \"\\r\\n\\r\\n<div class=\\\"mat-typography mb-3\\\">\\r\\n  <h2>Current Users</h2>\\r\\n</div>\\r\\n\\r\\nhere we will see a list of current users\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Jsb29tZW4vdXNlcnMvbGlzdC9saXN0LmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss']\r\n})\r\nexport class ListComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"mat-typography mb-3\\\">\\r\\n  <h2>Register New User</h2>\\r\\n</div>\\r\\n\\r\\n<mat-progress-bar *ngIf=\\\"isLoading\\\" mode=\\\"buffer\\\"></mat-progress-bar>\\r\\n\\r\\n\\r\\n<form [formGroup]=\\\"registerUser\\\" autocomplete=\\\"off\\\">\\r\\n  <mat-card class=\\\"mb-3\\\">\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>User Details</mat-card-title>\\r\\n      <mat-card-subtitle></mat-card-subtitle>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content formGroupName=\\\"accountDetails\\\">\\r\\n\\r\\n      <app-account-form  (formData)=\\\"eventHandler($event, 'accountDetails')\\\"></app-account-form>\\r\\n<!-- [data]=\\\"value\\\" -->\\r\\n    </mat-card-content>\\r\\n  </mat-card>\\r\\n\\r\\n  <mat-card class=\\\"mb-2\\\">\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>User Login</mat-card-title>\\r\\n      <mat-card-subtitle></mat-card-subtitle>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content formGroupName=\\\"logonDetails\\\">\\r\\n\\r\\n      <app-account-login-form mode=\\\"new\\\" (formData)=\\\"eventHandler($event, 'logonDetails')\\\">\\r\\n<!-- [data]=\\\"value\\\"  -->\\r\\n      </app-account-login-form>\\r\\n\\r\\n    </mat-card-content>\\r\\n  </mat-card>\\r\\n  <button mat-flat-button color=\\\"primary\\\" (click)=\\\"submit()\\\" \\r\\n  [disabled]=\\\"!allFormsVaild\\\">Submit</button>\\r\\n</form>\\r\\n\\r\\n{{allFormsVaild}}===!!\\r\\n<!-- \\r\\n{{accountDetails.invalid}} || {{logonDetails.invalid}} -->\\r\\n\\r\\n<!-- \\r\\n{{ registerUser.value | json }}\\r\\n{{ accountDetails.valid}} \\r\\n-->\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2Jsb29tZW4vdXNlcnMvcmVnaXN0ZXItdXNlci9yZWdpc3Rlci11c2VyLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { BloomenUsersService } from '../../_shared/bloomen-users.service';\r\nimport { HelpTextService } from 'src/app/_shared/services/help-text.service';\r\nimport { helpers } from 'chart.js';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-register-user',\r\n  templateUrl: './register-user.component.html',\r\n  styleUrls: ['./register-user.component.scss']\r\n})\r\nexport class RegisterUserComponent implements OnInit {\r\n  regFormIsVaild = false;\r\n  logonFormIsVaild = false;\r\n  allFormsVaild = false;\r\n  registerUser: FormGroup;\r\n  isLoading: boolean;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private userService: BloomenUsersService,\r\n    private help: HelpTextService,\r\n    private router: Router\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.createForm()\r\n  }\r\n\r\n  get accountDetails() {\r\n    return this.registerUser.get('accountDetails');\r\n  }\r\n  get logonDetails() {\r\n    return this.registerUser.get('logonDetails');\r\n  }\r\n  createForm() {\r\n    this.registerUser = this.fb.group({\r\n      accountDetails: [''],\r\n      logonDetails: ['']\r\n    });\r\n  }\r\n\r\n  eventHandler(event: any, form: string) {\r\n\r\n    switch (form) {\r\n      case 'accountDetails':\r\n      this.regFormIsVaild = event.valid && event.dirty;\r\n        break;\r\n\r\n      case 'logonDetails':\r\n      this.logonFormIsVaild = event.valid && event.dirty;\r\n      console.log(event);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\nthis.allFormsVaild = this.logonFormIsVaild && this.regFormIsVaild;\r\n    // setTimeout(() => {\r\n\r\n    // if (event.valid) {\r\n    //   this[form].patchValue(event.value);        \r\n    // }\r\n    // this.name.setErrors({ invalid: true, valid: false, badword: true })\r\n    // this[form].setErrors({ invalid: false});\r\n    console.log(this.accountDetails.valid);\r\n    console.log(this.logonDetails.valid);\r\n    console.log(event);\r\n    // });\r\n  }\r\n\r\n  submit() {\r\n    this.isLoading = true;\r\n    this.handleResponse('val');\r\n    // this.userService.create(this.registerUser.value)\r\n    //   .subscribe(val => {\r\n    //     this.handleResponse(val);\r\n    //   },\r\n    //     error => {\r\n    //    //   console.log(error.error.error);\r\n    //   //    alert(error.error.error);\r\n    //       // this.isValid = false;\r\n    //       // this.showForm = true\r\n    //       this.help.askHelp('', 'bloomen.registerFail' );\r\n    //    //    this.msgHeader = 'Oops a Daisy! ' + this.handleError(error.error.errorMessage) + ' Please check and try again';\r\n    //     });\r\n\r\n  }\r\n\r\n  handleResponse(str: string) {\r\n\r\n    setTimeout(() => {\r\n      this.help.askHelp('', 'bloomen.registerSuccess');\r\n      this.isLoading = false;\r\n\r\n      this.router.navigate([{ outlets: { primary: 'bloomen/users', popup: ['messages'] } }]);\r\n\r\n      // this.name.setErrors({ invalid: true, valid: false, badword: true })\r\n      // this[form].setErrors({ invalid: false});\r\n    }, 3000);\r\n\r\n    //   setTimeout(() => {\r\n    //  this.router.navigate(['bloomen/users', { outlets: { popup: ['messages']} }]);\r\n    //   }, 5000);\r\n    //   setTimeout(() => {\r\n    //   //  this.router.navigate([{ outlets: { popup: null } }]);\r\n    //   }, 7000);\r\n\r\n  }\r\n\r\n\r\n  handleError(str: string) {\r\n    const errMsg = str || 'The info you sent is not valid.'\r\n    if (errMsg.indexOf('expired') > -1) {\r\n      // this.showForm = false;\r\n\r\n    } else {\r\n      // this.showForm = true;\r\n    }\r\n    return errMsg;\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RegisterUserComponent } from './register-user/register-user.component';\r\nimport { ListComponent } from './list/list.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n{\r\n        path: '',\r\n        component: ListComponent,\r\n        data: {\r\n          pageTitle: {'de': 'Dateien' , 'fr': '', 'en-US': 'List User'},\r\n          breadcrumb: {'de': 'Dateien' , 'fr': '', 'en-US': 'list.title'},\r\n          menuLabel: 'List'  \r\n        }\r\n      },\r\n      {\r\n        path: 'list',\r\n        component: ListComponent,\r\n        data: {\r\n          pageTitle: {'de': 'Dateien' , 'fr': '', 'en-US': 'List User'},\r\n          breadcrumb: {'de': 'Dateien' , 'fr': '', 'en-US': 'list.title'},\r\n          menuLabel: 'List'  \r\n        }\r\n      },\r\n\r\n      {\r\n        path: 'register',\r\n        component: RegisterUserComponent,\r\n        data: {\r\n          pageTitle: {'de': 'Dateien' , 'fr': '', 'en-US': 'Register'},\r\n          breadcrumb: {'de': 'Dateien' , 'fr': '', 'en-US': 'register.title'},\r\n          menuLabel: 'Register'\r\n  \r\n        }\r\n      },\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UsersRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UsersRoutingModule } from './users-routing.module';\r\nimport { RegisterUserComponent } from './register-user/register-user.component';\r\n// import { ValidationService } from 'src/app/_shared/services/validation.service';\r\nimport { AccountFormComponent, AccountLoginFormComponent } from './_shared';\r\nimport { SharedModule, minlengthValidationMessage } from 'src/app/_shared/shared.module';\r\nimport { AppMaterialModule } from 'src/app/app-material/app-material.module';\r\nimport { ListComponent } from './list/list.component';\r\nimport { PasswordStrength } from 'src/app/_shared/directives/passwordValidation';\r\nimport { NG_VALIDATORS } from '@angular/forms';\r\nimport { FormlyMaterialModule } from '@ngx-formly/material';\r\nimport { FormlyModule } from '@ngx-formly/core';\r\nimport { UsersComponent } from './users.component';\r\nimport { UiFormModule } from '../../_shared/ui-form/ui-form.module';\r\n// import { UsersComponent } from './users.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [RegisterUserComponent, AccountFormComponent, AccountLoginFormComponent, ListComponent\r\n    ],\r\n  imports: [\r\n    CommonModule,\r\n    UsersRoutingModule,\r\n    SharedModule,\r\n    AppMaterialModule,\r\n    FormlyMaterialModule,\r\n    FormlyModule.forRoot({\r\n      validationMessages: [\r\n        { name: 'required', message: 'This field is required' },\r\n        { name: 'minlength', message: minlengthValidationMessage },\r\n      ],\r\n    }),\r\n    \r\n  ],\r\n  exports: [\r\n    AccountFormComponent,\r\n    AccountLoginFormComponent\r\n  ],\r\n  providers: [\r\n    // ValidationService,\r\n    {provide: NG_VALIDATORS, useValue: PasswordStrength, multi: true}\r\n  ]\r\n})\r\nexport class UsersModule { }\r\n"],"sourceRoot":""}